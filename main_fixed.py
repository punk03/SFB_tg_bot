"""
–°—Ç—Ä–æ–π –§–æ—Ä—É–º –ë–µ–ª–≥–æ—Ä–æ–¥ - Telegram Bot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import *

# –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º-–ø–∞—Ä—Ç–Ω–µ—Ä–∞–º
async def partners_stores_handler(message, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode=ParseMode.HTML)
    
    global shops_categories_cache, shops_categories_cache_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if shops_categories_cache and current_time - shops_categories_cache_time < config.CACHE_TIME:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        shop_categories = shops_categories_cache
    else:
        # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        shop_categories = await get_shop_list_async(config.VK_TOKEN, config.VK_GROUP_ID)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        shops_categories_cache = shop_categories
        shops_categories_cache_time = current_time
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await loading_message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º all_shops)
    categories = {k: v for k, v in shop_categories.items() if k != "all_shops"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        await message.answer(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.",
            reply_markup=buttons.go_back()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    has_shops = False
    for category, shops in categories.items():
        if shops and len(shops) > 0:
            has_shops = True
            break
    
    if not has_shops:
        await message.answer(
            "‚ö†Ô∏è –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.",
            reply_markup=buttons.go_back()
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {list(categories.keys())}")
    
    # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    categories_list = list(categories.keys())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    kb = buttons.generator(categories_list, row_width=1, force_single_column=True, preserve_emoji=True, sort_alphabetically=False)
    await message.answer('üè™ <b>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞–≥–∞–∑–∏–Ω–æ–≤:', 
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb)
    await User.get_shop_category.set()
    await state.set_data(shop_categories)

# –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.message_handler(state=User.get_shop_category)
async def show_shops_by_category(message: types.Message, state: FSMContext):
    shop_categories = await state.get_data()
    
    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {message.text}")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {[k for k in shop_categories.keys() if k != 'all_shops']}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é - —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—á–µ—Ç—á–∏–∫ [N]
    category_name = message.text
    
    # –£–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [N]
    if ' [' in category_name and category_name.endswith(']'):
        category_name = category_name.split(' [')[0]
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'üìã ' in category_name:
        category_name = category_name.replace('üìã ', '')
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑
    found_category = None
    for cat in shop_categories.keys():
        if cat == category_name or cat == category_name.strip():
            found_category = cat
            break
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        no_emoji_cat = cat
        for emoji in ["üè™", "üß±", "üî®", "ü™ë", "üå±", "üöø", "üîå", "üè°"]:
            if cat.startswith(emoji + " "):
                no_emoji_cat = cat[len(emoji) + 1:]
                break
        if no_emoji_cat == category_name or no_emoji_cat.strip() == category_name.strip():
            found_category = cat
            break
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not found_category:
        categories = {k: v for k, v in shop_categories.items() if k != "all_shops"}
        # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        categories_list = list(categories.keys())
        await message.answer(
            f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.", 
            reply_markup=buttons.generator(categories_list, row_width=1, force_single_column=True, preserve_emoji=True, sort_alphabetically=False)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    shops = shop_categories[found_category]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not shops:
        await message.answer(
            f"‚ö†Ô∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{found_category}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
            reply_markup=buttons.go_back()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    kb = buttons.generator_with_categories_button(shops.keys(), row_width=1, force_single_column=True, preserve_emoji=True)
    await message.answer(
        f"üè™ <b>–ú–∞–≥–∞–∑–∏–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {found_category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:", 
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    await state.update_data(current_category=found_category)
    await User.get_shop_info.set()

# –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞–≥–∞–∑–∏–Ω–æ–≤", state=User.get_shop_info)
async def back_to_shop_categories(message: types.Message, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode=ParseMode.HTML)
    
    global shops_categories_cache, shops_categories_cache_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if shops_categories_cache and current_time - shops_categories_cache_time < config.CACHE_TIME:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
        shop_categories = shops_categories_cache
    else:
        # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
        shop_categories = await get_shop_list_async(config.VK_TOKEN, config.VK_GROUP_ID)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        shops_categories_cache = shop_categories
        shops_categories_cache_time = current_time
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await loading_message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º all_shops)
    categories = {k: v for k, v in shop_categories.items() if k != "all_shops"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        await message.answer(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.",
            reply_markup=buttons.go_back()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    has_shops = False
    for category, shops in categories.items():
        if shops and len(shops) > 0:
            has_shops = True
            break
    
    if not has_shops:
        await message.answer(
            "‚ö†Ô∏è –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.",
            reply_markup=buttons.go_back()
        )
        await state.finish()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {list(categories.keys())}")
    
    # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    categories_list = list(categories.keys())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    kb = buttons.generator(categories_list, row_width=1, force_single_column=True, preserve_emoji=True, sort_alphabetically=False)
    await message.answer('üè™ <b>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞–≥–∞–∑–∏–Ω–æ–≤:', 
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data(shop_categories)
    await User.get_shop_category.set()

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!") 