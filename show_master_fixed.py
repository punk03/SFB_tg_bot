"""
–°—Ç—Ä–æ–π –§–æ—Ä—É–º –ë–µ–ª–≥–æ—Ä–æ–¥ - Telegram Bot
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import *

@dp.message_handler(state=User.get_master)
async def show_master(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    if message.text == "‚óÄÔ∏è –ù–ê–ó–ê–î –ö –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –ú–ê–°–¢–ï–†–û–í ‚óÄÔ∏è" or message.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞—Å—Ç–µ—Ä–æ–≤":
        logger.info(f"–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: '{message.text}'")
        await back_to_master_categories(message, state)
        return
    
    data = await state.get_data()
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    original_text = message.text
    category = message.text
    # –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
    emoji_list = ["üìã", "üìÇ", "üîß", "üè¢", "üìù", "üõí", "üî®", "üè™", "üèó", "üöø", "üîå", "üè°", "üß±", "üöú", "ü™ë", "üå±"]
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞
    for emoji in emoji_list:
        if category.startswith(emoji + " "):
            category = category[len(emoji) + 1:]
            break
    
    # –£–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [N]
    if ' [' in category and category.endswith(']'):
        category = category.split(' [')[0]
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{original_text}', –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{category}'")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(data.keys())}")
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    found_category = None
    
    # 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if category in data:
        found_category = category
    else:
        # 2. –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for key in data.keys():
            clean_key = key
            # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∫–ª—é—á–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            for emoji in emoji_list:
                if clean_key.startswith(emoji + " "):
                    clean_key = clean_key[len(emoji) + 1:]
                    break
                    
            logger.info(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: '{category.lower()}' —Å '{clean_key.lower()}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –æ—Ç —ç–º–æ–¥–∑–∏ –∫–ª—é—á–∞–º–∏
            if clean_key.lower() == category.lower():
                found_category = key
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{key}'")
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏, –∞ –∫–ª—é—á - –Ω–µ—Ç
            for emoji in emoji_list:
                if original_text.startswith(emoji + " "):
                    original_without_emoji = original_text[len(emoji) + 1:]
                    if key.lower() == original_without_emoji.lower():
                        found_category = key
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —ç–º–æ–¥–∑–∏: '{key}'")
                        break
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not found_category:
        logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{category}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(data.keys())}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        global non_empty_masters_cache
        if non_empty_masters_cache and "buttons" in non_empty_masters_cache:
            category_buttons = non_empty_masters_cache["buttons"]
        else:
            # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
            category_buttons = []
            for cat, album_id in data.items():
                await vk_api_rate_limit()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
                photos = await get_album_photos_async(config.VK_TOKEN, config.VK_GROUP_ID, album_id)
                photo_count = len(photos) if photos else 0
                category_buttons.append((cat, photo_count))
        
        await message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.", 
                            reply_markup=buttons.generator(category_buttons))
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer(f"üîç <b>–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {found_category}...", 
                        parse_mode=ParseMode.HTML)
                          
    current = data.get(found_category)
    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª—å–±–æ–º ID: {current} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{found_category}'")
    await vk_api_rate_limit()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
    photos = await get_album_photos_async(config.VK_TOKEN, config.VK_GROUP_ID, current)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await loading_message.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await state.update_data(current_master_category=found_category)
    
    if not photos:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(f"üì∏ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è {found_category}</b>\n\n‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –º–∞—Å—Ç–µ—Ä–æ–º –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–∞—Å—Ç—å –≤ –±–∞–∑—É –º–∞—Å—Ç–µ—Ä–æ–≤' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
                         parse_mode=ParseMode.HTML,
                         reply_markup=buttons.navigation_keyboard(include_masters_categories=True))
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ
    await message.answer(f"üì∏ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è {found_category}</b>\n\n–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}. –ó–∞–≥—Ä—É–∂–∞—é...", 
                         parse_mode=ParseMode.HTML)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
    # –∏ –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
    max_photos = min(config.MAX_PHOTOS_PER_REQUEST, len(photos))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥—Ä—É–ø–ø–∞–º–∏, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    sent_count = 0
    for i, photo in enumerate(photos[:max_photos]):
        caption = photo['description'] if photo['description'] else f"–§–æ—Ç–æ {i+1} –∏–∑ {max_photos}"
        full_caption = f"<b>üì∏ {found_category}</b>\n\n{caption}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–±–ª–∏–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        full_caption += f"\n\nüåê <a href='{config.VK_GROUP_URL}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–±–ª–∏–∫ –°–§–ë –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</a>"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏
            if len(full_caption) <= 1024:
                await message.answer_photo(
                    photo=photo['url'], 
                    caption=full_caption, 
                    parse_mode=ParseMode.HTML
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                logger.info(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{found_category}': {len(full_caption)} —Å–∏–º–≤–æ–ª–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.")
                await message.answer_photo(photo=photo['url'])
                await message.answer(full_caption, parse_mode=ParseMode.HTML)
                
            sent_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞ –∏ –ª–∏–º–∏—Ç–æ–≤ Telegram
            if i < max_photos - 1:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
                await asyncio.sleep(config.PHOTO_DELAY)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞: {error_msg}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if "Bad Request" in error_msg and ("Wrong file identifier" in error_msg or "PHOTO_INVALID_DIMENSIONS" in error_msg):
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞: {error_msg}")
                await message.answer(
                    f"<b>üì∏ {found_category}</b>\n\n{caption}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                    parse_mode=ParseMode.HTML
                )
            elif "Message caption is too long" in error_msg:
                # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                logger.warning(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞: {len(full_caption)} —Å–∏–º–≤–æ–ª–æ–≤")
                try:
                    await message.answer_photo(photo=photo['url'])
                    await message.answer(full_caption, parse_mode=ParseMode.HTML)
                except Exception as inner_e:
                    logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞: {inner_e}")
                    await message.answer(full_caption, parse_mode=ParseMode.HTML)
            else:
                # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞. –û–ø–∏—Å–∞–Ω–∏–µ: {caption}")
    
    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–æ–ª—å—à–µ, —á–µ–º –º—ã –ø–æ–∫–∞–∑–∞–ª–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if len(photos) > max_photos:
        await message.answer(f"‚ö†Ô∏è <b>–ü–æ–∫–∞–∑–∞–Ω–æ {max_photos} –∏–∑ {len(photos)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ—Å–µ—Ç–∏—Ç–µ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.", 
                             parse_mode=ParseMode.HTML)
    
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await message.answer("üîç <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.</b> –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
                         parse_mode=ParseMode.HTML,
                         reply_markup=buttons.navigation_keyboard(include_masters_categories=True))

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!") 