import vk_api
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
executor = ThreadPoolExecutor(max_workers=4)

async def run_in_executor(func, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ IO"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(executor, lambda: func(*args, **kwargs))

def get_vk_session(token):
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = vk_api.VkApi(token=token)
        return vk_session
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VK —Å–µ—Å—Å–∏–∏: {e}")
        return None

def get_group_description(token, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return None
            
        vk = vk_session.get_api()

        # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        group_info = vk.groups.getById(
            group_id=group_id,
            fields=["description"]
        )
        
        if not group_info or not isinstance(group_info, list) or len(group_info) == 0:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_id}")
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        description = group_info[0].get("description", "")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_id}, –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_description = ""
        if description:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π
            paragraphs = description.split("\n\n")
            
            for i, paragraph in enumerate(paragraphs):
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
                if i == 0:
                    formatted_description += f"<b>üèó {paragraph}</b>\n\n"
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–∞–∂–¥–æ–º—É –∞–±–∑–∞—Ü—É
                    formatted_description += f"üîπ {paragraph}\n\n"
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            formatted_description = formatted_description.rstrip()
            
        return formatted_description or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return None

def get_album_names(token, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –≥—Ä—É–ø–ø—ã
        response = vk.photos.getAlbums(
            owner_id=-group_id  # –ó–Ω–∞–∫ '-' –ø–µ—Ä–µ–¥ group_id —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
        )

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–ª—å–±–æ–º–æ–≤
        data = {}
        for i in response.get("items", []):
            album_title = i.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º")
            album_id = i.get("id")
            
            # –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            data[album_title] = album_id
            
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∞–ª—å–±–æ–º–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
        return data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–æ–≤: {e}")
        return {}


def get_album_photos(token, owner_id, album_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞–ª—å–±–æ–º–∞
        photos = vk.photos.get(owner_id=-owner_id, album_id=album_id, extended=1)
        result = []

        for photo in photos.get("items", []):
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            max_size = max(photo.get("sizes", []), key=lambda size: size.get("width", 0) * size.get("height", 0))
            photo_url = max_size.get("url")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ
            photo_info = {
                "url": photo_url,
                "description": photo.get("text", ""),
                "likes": photo.get("likes", {}).get("count", 0),
                "date": photo.get("date"),
                "id": photo.get("id")  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            }
            
            result.append(photo_info)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}: {e}")
        return []


def get_market_items(token, owner_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞—Ä–∫–µ—Ç–∞ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        albums = vk.market.getAlbums(owner_id=-owner_id, count=100)
        result = {}

        for item in albums.get("items", []):
            album_title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            album_id = item.get("id")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
            if "—Å—Ç—Ä–æ–π" in album_title.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª" in album_title.lower():
                album_title = f"üß± {album_title}"
            elif "–∏–Ω—Å—Ç—Ä" in album_title.lower():
                album_title = f"üî® {album_title}"
            elif "–º–µ–±–µ–ª" in album_title.lower():
                album_title = f"ü™ë {album_title}"
            elif "—Å–∞–¥" in album_title.lower() or "–æ–≥–æ—Ä–æ–¥" in album_title.lower():
                album_title = f"üå± {album_title}"
            else:
                album_title = f"üõí {album_title}"
                
            result[album_title] = album_id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {owner_id}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return {}

def get_shop_list(token, owner_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        shop_categories = {}
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–∞ (–∞–ª—å–±–æ–º—ã)
            market_albums = vk.market.getAlbums(owner_id=-owner_id, count=100)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(market_albums.get('items', []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Ä–∫–µ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã {owner_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            all_shops = {}
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–∞
            for album in market_albums.get("items", []):
                album_id = album.get("id")
                album_title = album.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                if "—Å—Ç—Ä–æ–π" in album_title.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª" in album_title.lower():
                    album_title = f"üß± {album_title}"
                elif "–∏–Ω—Å—Ç—Ä" in album_title.lower():
                    album_title = f"üî® {album_title}"
                elif "–º–µ–±–µ–ª" in album_title.lower():
                    album_title = f"ü™ë {album_title}"
                elif "—Å–∞–¥" in album_title.lower() or "–æ–≥–æ—Ä–æ–¥" in album_title.lower():
                    album_title = f"üå± {album_title}"
                elif "—Å–∞–Ω—Ç–µ—Ö" in album_title.lower() or "–≤–æ–¥–æ—Å–Ω" in album_title.lower():
                    album_title = f"üöø {album_title}"
                elif "—ç–ª–µ–∫—Ç—Ä" in album_title.lower() or "–æ—Å–≤–µ—â" in album_title.lower():
                    album_title = f"üîå {album_title}"
                elif "—Ö–æ–∑—Ç–æ–≤–∞—Ä" in album_title.lower() or "–¥–ª—è –¥–æ–º–∞" in album_title.lower():
                    album_title = f"üè° {album_title}"
                else:
                    album_title = f"üè™ {album_title}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                if album_title not in shop_categories:
                    shop_categories[album_title] = {}
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (–º–∞–≥–∞–∑–∏–Ω—ã) –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 200
                items = vk.market.get(owner_id=-owner_id, album_id=album_id, count=200, extended=1)
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{album_title}'")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω
                for item in items.get("items", []):
                    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    item_id = item.get("id")
                    title = item.get("title", "–ú–∞–≥–∞–∑–∏–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = item.get("description", "")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
                    photo_url = None
                    if "photos" in item and item["photos"]:
                        try:
                            best_photo = max(
                                item["photos"][0].get("sizes", []), 
                                key=lambda size: size.get("width", 0) * size.get("height", 0)
                            )
                            photo_url = best_photo.get("url")
                        except (IndexError, KeyError):
                            photo_url = item.get("thumb_photo")
                    else:
                        photo_url = item.get("thumb_photo")
                    
                    # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    address = "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
                    phone = "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"
                    website = "#"
                    work_hours = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    lines = description.split("\n")
                    for line in lines:
                        line = line.strip()
                        if not line:
                            continue
                            
                        # –ò—â–µ–º –∞–¥—Ä–µ—Å
                        if line.lower().startswith("–∞–¥—Ä–µ—Å:") or line.lower().startswith("–∞–¥—Ä–µ—Å "):
                            address = line.split(":", 1)[1].strip() if ":" in line else line.strip()
                        
                        # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                        elif (line.lower().startswith("—Ç–µ–ª:") or 
                              line.lower().startswith("—Ç–µ–ª–µ—Ñ–æ–Ω:") or
                              line.lower().startswith("—Ç–µ–ª.") or
                              line.lower().startswith("—Ç:")):
                            phone = line.split(":", 1)[1].strip() if ":" in line else line.strip()
                        
                        # –ò—â–µ–º —Å–∞–π—Ç
                        elif (line.lower().startswith("—Å–∞–π—Ç:") or 
                              line.lower().startswith("website:") or
                              line.lower().startswith("http") or
                              ".ru" in line or ".com" in line or ".—Ä—Ñ" in line):
                            website = line.split(":", 1)[1].strip() if ":" in line else line.strip()
                            
                        # –ò—â–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                        elif (line.lower().startswith("—Ä–µ–∂–∏–º") or 
                              line.lower().startswith("–≤—Ä–µ–º—è") or
                              line.lower().startswith("—á–∞—Å—ã") or
                              "—Ä–∞–±–æ—Ç–∞–µ–º" in line.lower()):
                            work_hours = line.split(":", 1)[1].strip() if ":" in line else line.strip()
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–≥–∞–∑–∏–Ω–µ
                    shop_info = {
                        "title": title,
                        "description": description,
                        "photo": photo_url,
                        "address": address,
                        "phone": phone,
                        "website": website,
                        "work_hours": work_hours,
                        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –≤ –í–ö
                        "vk_url": f"https://vk.com/market-{owner_id}?w=product-{owner_id}_{item_id}"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
                    key = f"üè™ {title}"
                    shop_categories[album_title][key] = shop_info
                    all_shops[key] = shop_info
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            shop_categories["all_shops"] = all_shops
            
            return shop_categories
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return {"all_shops": {}}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
        return {"all_shops": {}}

def get_market_item_info(token, owner_id, album_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = vk.market.get(owner_id=-owner_id, album_id=album_id, count=200, extended=1)
        result = []

        for item in items.get("items", []):
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            item_id = item.get("id")
            title = item.get("title", "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = item.get("description", "")
            price = item.get("price", {}).get("text", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
            photo_url = None
            if "photos" in item and item["photos"]:
                try:
                    best_photo = max(
                        item["photos"][0].get("sizes", []), 
                        key=lambda size: size.get("width", 0) * size.get("height", 0)
                    )
                    photo_url = best_photo.get("url")
                except (IndexError, KeyError):
                    photo_url = item.get("thumb_photo")
            else:
                photo_url = item.get("thumb_photo")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
            item_info = {
                "title": title,
                "description": description,
                "price": price,
                "photo": photo_url,
                "url": f"https://vk.com/market-{owner_id}?w=product-{owner_id}_{item_id}"
            }
            
            result.append(item_info)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {album_id}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {album_id}: {e}")
        return []

def get_photo_comments(token, owner_id, photo_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        comments = vk.photos.getComments(
            owner_id=-owner_id, 
            photo_id=photo_id,
            need_likes=0,
            count=100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            extended=1,  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            fields="attachments"  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        )
        
        result = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        for comment in comments.get("items", []):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã)
            from_group = comment.get("from_group", 0)
            from_id = comment.get("from_id", 0)
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            if from_group == owner_id or from_id == -owner_id:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                text = comment.get("text", "")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
                attachments = comment.get("attachments", [])
                photos = []
                
                for attachment in attachments:
                    if attachment.get("type") == "photo":
                        photo = attachment.get("photo", {})
                        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
                        if photo.get("sizes"):
                            max_size = max(photo.get("sizes", []), 
                                        key=lambda size: size.get("width", 0) * size.get("height", 0))
                            photo_url = max_size.get("url")
                            
                            photo_info = {
                                "url": photo_url,
                                "description": text,
                                "likes": photo.get("likes", {}).get("count", 0),
                                "date": photo.get("date")
                            }
                            
                            photos.append(photo_info)
                
                if photos:
                    result.extend(photos)
        
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {photo_id}: {e}")
        return []


def get_topic_comments(token, group_id, topic_id, count=100):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Ç–µ–º—ã (–æ–±—Å—É–∂–¥–µ–Ω–∏—è) –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    
    Args:
        token: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        group_id: ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–±–µ–∑ –º–∏–Ω—É—Å–∞)
        topic_id: ID —Ç–µ–º—ã (–æ–±—Å—É–∂–¥–µ–Ω–∏—è)
        count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100)
    
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è—Ö
    """
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        comments = vk.board.getComments(
            group_id=group_id,
            topic_id=topic_id,
            count=count,
            extended=1,  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            need_likes=0,
            sort="desc"  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        )
        
        result = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
        users_map = {}
        if "profiles" in comments:
            for profile in comments.get("profiles", []):
                user_id = profile.get("id")
                first_name = profile.get("first_name", "")
                last_name = profile.get("last_name", "")
                full_name = f"{first_name} {last_name}".strip()
                photo = profile.get("photo_100", "")
                
                users_map[user_id] = {
                    "name": full_name,
                    "photo": photo
                }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        for comment in comments.get("items", []):
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            text = comment.get("text", "")
            date = comment.get("date", 0)
            from_id = comment.get("from_id", 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = users_map.get(from_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "photo": ""})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            attachments = comment.get("attachments", [])
            attachment_data = []
            
            for attachment in attachments:
                att_type = attachment.get("type", "")
                
                if att_type == "photo":
                    photo = attachment.get("photo", {})
                    if photo.get("sizes"):
                        try:
                            max_size = max(
                                photo.get("sizes", []), 
                                key=lambda size: size.get("width", 0) * size.get("height", 0)
                            )
                            photo_url = max_size.get("url", "")
                            attachment_data.append({
                                "type": "photo",
                                "url": photo_url
                            })
                        except (ValueError, KeyError):
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è")
                            
                elif att_type == "doc":
                    doc = attachment.get("doc", {})
                    doc_url = doc.get("url", "")
                    doc_title = doc.get("title", "–î–æ–∫—É–º–µ–Ω—Ç")
                    attachment_data.append({
                        "type": "doc",
                        "url": doc_url,
                        "title": doc_title
                    })
                    
                elif att_type == "link":
                    link = attachment.get("link", {})
                    link_url = link.get("url", "")
                    link_title = link.get("title", "–°—Å—ã–ª–∫–∞")
                    attachment_data.append({
                        "type": "link",
                        "url": link_url,
                        "title": link_title
                    })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_data = {
                "id": comment.get("id", 0),
                "date": date,
                "text": text,
                "from_id": from_id,
                "user": user_info,
                "attachments": attachment_data
            }
            
            result.append(comment_data)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ —Ç–µ–º—ã {topic_id} –≥—Ä—É–ø–ø—ã {group_id}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ —Ç–µ–º—ã {topic_id}: {e}")
        return []


def get_topic_info(token, group_id, topic_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    
    Args:
        token: —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        group_id: ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (–±–µ–∑ –º–∏–Ω—É—Å–∞)
        topic_id: ID —Ç–µ–º—ã (–æ–±—Å—É–∂–¥–µ–Ω–∏—è)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–µ
    """
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return None
            
        vk = vk_session.get_api()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        topic = vk.board.getTopics(
            group_id=group_id,
            topic_ids=[topic_id],
            extended=1,  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            preview=1,   # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            preview_length=0  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        )
        
        if not topic or "items" not in topic or not topic["items"]:
            logger.warning(f"–¢–µ–º–∞ {topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ {group_id}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
        topic_data = topic["items"][0]
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        result = {
            "id": topic_data.get("id", 0),
            "title": topic_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "created": topic_data.get("created", 0),
            "comments": topic_data.get("comments", 0),
            "text": topic_data.get("first_comment", ""),
            "updated": topic_data.get("updated", 0),
        }
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ {topic_id} –≥—Ä—É–ø–ø—ã {group_id}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ {topic_id}: {e}")
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞

async def get_topic_comments_async(token, group_id, topic_id, count=100):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è get_topic_comments"""
    return await run_in_executor(get_topic_comments, token, group_id, topic_id, count)

async def get_topic_info_async(token, group_id, topic_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è get_topic_info"""
    return await run_in_executor(get_topic_info, token, group_id, topic_id) 