import vk_api
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor
import time
import re
import random
from functools import lru_cache
from urllib3.util import Retry
from vk_api.exceptions import ApiError, Captcha
import requests
from requests.adapters import HTTPAdapter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
executor = ThreadPoolExecutor(max_workers=4)

async def run_in_executor(func, *args, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ IO"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(executor, lambda: func(*args, **kwargs))

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
def create_optimized_session():
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    session = requests.Session()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    retry_strategy = Retry(
        total=3,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        backoff_factor=0.5,  # –§–∞–∫—Ç–æ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (0.5 * (2 ^ (retry - 1)))
        status_forcelist=[429, 500, 502, 503, 504],  # –ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è HTTP –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        allowed_methods=["GET", "POST"]  # –ú–µ—Ç–æ–¥—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–æ –≤—Å–µ–º –∞–¥–∞–ø—Ç–µ—Ä–∞–º
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    
    return session

# –ö—ç—à –¥–ª—è —Å–µ—Å—Å–∏–π VK API
vk_sessions = {}

@lru_cache(maxsize=32)
def get_vk_session(token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é VK API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    if token in vk_sessions:
        return vk_sessions[token]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        session = create_optimized_session()
        vk_session = vk_api.VkApi(token=token, session=session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        vk = vk_session.get_api()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        vk.users.get(user_ids=[1])
        
        # –ö—ç—à–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        vk_sessions[token] = vk_session
        return vk_session
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ VK API: {e}")
        return None

def api_call_with_retry(method, *args, max_retries=3, **kwargs):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    retries = 0
    while retries < max_retries:
        try:
            return method(*args, **kwargs)
        except ApiError as e:
            error_code = getattr(e, 'code', None)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
            if error_code == 6:  # Too many requests per second
                sleep_time = 0.5 * (2 ** retries)
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time} —Å–µ–∫...")
                time.sleep(sleep_time)
                retries += 1
                continue
            elif error_code == 14:  # Captcha needed
                logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–∞–ø—á–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
                return None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API VK: {e}")
                return None
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            sleep_time = 1 * (2 ** retries)
            time.sleep(sleep_time)
            retries += 1
            continue
    
    logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {max_retries}")
    return None

def get_group_description(token, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return None
        
        vk = vk_session.get_api()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        group_info = api_call_with_retry(
            vk.groups.getById,
            group_id=group_id, 
            fields=["description"]
        )
        
        if not group_info:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        description = group_info[0].get("description", "")
        return description
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        return None

def get_album_names(token, group_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –≥—Ä—É–ø–ø—ã
        response = vk.photos.getAlbums(
            owner_id=-group_id  # –ó–Ω–∞–∫ '-' –ø–µ—Ä–µ–¥ group_id —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
        )

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–ª—å–±–æ–º–æ–≤
        data = {}
        for i in response.get("items", []):
            album_title = i.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º")
            album_id = i.get("id")
            
            # –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            data[album_title] = album_id
            
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∞–ª—å–±–æ–º–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
        return data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–æ–≤: {e}")
        return {}


def get_album_photos(token, owner_id, album_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ album_id –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–∏—Å–ª–æ)
        try:
            album_id = int(album_id)
        except (ValueError, TypeError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç album_id: {album_id}")
            return []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞–ª—å–±–æ–º–∞
        try:
            photos = vk.photos.get(owner_id=-owner_id, album_id=album_id, extended=1)
            result = []

            for photo in photos.get("items", []):
                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
                try:
                    max_size = max(photo.get("sizes", []), key=lambda size: size.get("width", 0) * size.get("height", 0))
                    photo_url = max_size.get("url")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ
                    photo_info = {
                        "url": photo_url,
                        "description": photo.get("text", ""),
                        "likes": photo.get("likes", {}).get("count", 0),
                        "date": photo.get("date")
                    }
                    
                    result.append(photo_info)
                except (ValueError, KeyError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}: {e}")
                    continue

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}")
            return result
            
        except vk_api.exceptions.ApiError as e:
            error_msg = str(e)
            if "album_id is invalid" in error_msg:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π album_id: {album_id}. –í–æ–∑–º–æ–∂–Ω–æ, –∞–ª—å–±–æ–º –±—ã–ª —É–¥–∞–ª–µ–Ω")
            else:
                logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {error_msg}")
            return []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}: {e}")
        return []


def get_market_items(token, owner_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞—Ä–∫–µ—Ç–∞ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        albums = vk.market.getAlbums(owner_id=-owner_id, count=100)
        result = {}

        for item in albums.get("items", []):
            album_title = item.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            album_id = item.get("id")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
            if "—Å—Ç—Ä–æ–π" in album_title.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª" in album_title.lower():
                album_title = f"üß± {album_title}"
            elif "–∏–Ω—Å—Ç—Ä" in album_title.lower():
                album_title = f"üî® {album_title}"
            elif "–º–µ–±–µ–ª" in album_title.lower():
                album_title = f"ü™ë {album_title}"
            elif "—Å–∞–¥" in album_title.lower() or "–æ–≥–æ—Ä–æ–¥" in album_title.lower():
                album_title = f"üå± {album_title}"
            else:
                album_title = f"üõí {album_title}"
                
            result[album_title] = album_id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {owner_id}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return {}

def get_shop_list(token, owner_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return {}
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        shop_categories = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            group_info = vk.groups.getById(group_id=owner_id, fields=["photo_200"])
            default_photo = None
            if group_info and len(group_info) > 0:
                default_photo = group_info[0].get("photo_200")
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –ª–æ–≥–æ—Ç–∏–ø –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {default_photo}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            time.sleep(0.3)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–∞ (–∞–ª—å–±–æ–º—ã)
            market_albums = vk.market.getAlbums(owner_id=-owner_id, count=100)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(market_albums.get('items', []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Ä–∫–µ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã {owner_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            all_shops = {}
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–∞
            for i, album in enumerate(market_albums.get("items", [])):
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
                if i > 0:
                    time.sleep(0.3)
                    
                album_id = album.get("id")
                album_title = album.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                category_emoji = "üè™"
                if "—Å—Ç—Ä–æ–π" in album_title.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª" in album_title.lower():
                    category_emoji = "üß±"
                elif "–∏–Ω—Å—Ç—Ä" in album_title.lower():
                    category_emoji = "üî®"
                elif "–º–µ–±–µ–ª" in album_title.lower():
                    category_emoji = "ü™ë"
                elif "—Å–∞–¥" in album_title.lower() or "–æ–≥–æ—Ä–æ–¥" in album_title.lower():
                    category_emoji = "üå±"
                elif "—Å–∞–Ω—Ç–µ—Ö" in album_title.lower() or "–≤–æ–¥–æ—Å–Ω" in album_title.lower():
                    category_emoji = "üöø"
                elif "—ç–ª–µ–∫—Ç—Ä" in album_title.lower() or "–æ—Å–≤–µ—â" in album_title.lower():
                    category_emoji = "üîå"
                elif "—Ö–æ–∑—Ç–æ–≤–∞—Ä" in album_title.lower() or "–¥–ª—è –¥–æ–º–∞" in album_title.lower():
                    category_emoji = "üè°"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                original_category_title = album_title
                display_category_title = f"{category_emoji} {album_title}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                if original_category_title not in shop_categories:
                    shop_categories[original_category_title] = {}
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (–º–∞–≥–∞–∑–∏–Ω—ã) –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 200
                    items = vk.market.get(owner_id=-owner_id, album_id=album_id, count=200, extended=1)
                    
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_category_title}'")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω
                    for item in items.get("items", []):
                        try:
                            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–∑ —Ç–æ–≤–∞—Ä–∞
                            item_id = item.get("id")
                            title = item.get("title", "–ú–∞–≥–∞–∑–∏–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                            description = item.get("description", "")
                            
                            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                            photo_url = None
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞
                            if "photos" in item and item["photos"] and len(item["photos"]) > 0:
                                try:
                                    sizes = item["photos"][0].get("sizes", [])
                                    if sizes:
                                        best_photo = max(
                                            sizes, 
                                            key=lambda size: size.get("width", 0) * size.get("height", 0)
                                        )
                                        photo_url = best_photo.get("url")
                                        logger.info(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ –∏–∑ photos[0].sizes: {photo_url}")
                                except (IndexError, KeyError, ValueError) as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ photos –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}': {e}")
                                    
                            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å thumb_photo
                            if not photo_url:
                                photo_url = item.get("thumb_photo")
                                if photo_url:
                                    logger.info(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ –∏–∑ thumb_photo: {photo_url}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
                            if not photo_url and "images" in item and item["images"]:
                                try:
                                    photo_url = item["images"][0].get("url")
                                    logger.info(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ –∏–∑ images: {photo_url}")
                                except (IndexError, KeyError) as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ images –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}': {e}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                            if not photo_url:
                                photo_url = item.get("preview", {}).get("photo", {}).get("sizes", [{}])[-1].get("url")
                                if photo_url:
                                    logger.info(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ –∏–∑ preview: {photo_url}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 5: –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                            if not photo_url:
                                photo_url = default_photo
                                logger.warning(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–æ—Ç–∏–ø –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {photo_url}")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç 6: –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–æ—Ç–∏–ø –≥—Ä—É–ø–ø—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                            if not photo_url:
                                photo_url = "https://vk.com/images/camera_200.png"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ VK
                                logger.warning(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ VK –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞")
                                
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                            address = ""
                            phone = ""
                            website = ""
                            work_hours = ""
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                            if description:
                                # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞)
                                address_match = re.search(r'–∞–¥—Ä–µ—Å[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                if address_match:
                                    address = address_match.group(1).strip()
                                else:
                                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞
                                    address_match = re.search(r'–Ω–∞—Ö–æ–¥–∏–º—Å—è[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                    if address_match:
                                        address = address_match.group(1).strip()
                                
                                # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
                                phone_match = re.search(r'(?:—Ç–µ–ª(?:–µ—Ñ–æ–Ω)?|–∑–≤–æ–Ω–∏—Ç–µ)[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                if phone_match:
                                    phone = phone_match.group(1).strip()
                                else:
                                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
                                    phone_match = re.search(r'(?:\+7|8)[\s\-(]?\d{3}[\s\-\)]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', description)
                                    if phone_match:
                                        phone = phone_match.group(0).strip()
                                
                                # –ò—â–µ–º —Å–∞–π—Ç –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ VK
                                website_match = re.search(r'(?:—Å–∞–π—Ç|—Å—Ç—Ä–∞–Ω–∏—Ü–∞|–≥—Ä—É–ø–ø–∞|vk)[:\s-]+([^\s]+)', description, re.IGNORECASE)
                                if website_match:
                                    website = website_match.group(1).strip()
                                else:
                                    # –ò—â–µ–º URL-–∞–¥—Ä–µ—Å–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                                    url_match = re.search(r'https?://[^\s]+', description)
                                    if url_match:
                                        website = url_match.group(0).strip()
                                
                                # –ò—â–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                                work_match = re.search(r'(?:–≥—Ä–∞—Ñ–∏–∫|—Ä–∞–±–æ—Ç–∞–µ–º|—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã|–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã)[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                if work_match:
                                    work_hours = work_match.group(1).strip()
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –º–∞–≥–∞–∑–∏–Ω–∞ –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            original_shop_title = title
                            shop_key = f"üè™ {title}"
                            
                            shop_data = {
                                "id": item_id,
                                "title": title,
                                "description": description,
                                "address": address,
                                "phone": phone,
                                "website": website,
                                "work_hours": work_hours,
                                "photo": photo_url,
                                "vk_url": f"https://vk.com/market-{owner_id}?w=product-{owner_id}_{item_id}",
                                "category": original_category_title
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                            shop_categories[original_category_title][original_shop_title] = shop_data
                            all_shops[original_shop_title] = shop_data
                        except Exception as item_e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_category_title}': {item_e}")
                            continue
                
                except Exception as category_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_category_title}': {category_e}")
                    continue
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if not shop_categories or all(len(shops) == 0 for category, shops in shop_categories.items()):
                logger.info("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    items = vk.market.get(owner_id=-owner_id, count=200, extended=1)
                    
                    if items and items.get("items"):
                        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã"
                        all_category = "–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã"
                        shop_categories[all_category] = {}
                        
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                        for item in items.get("items", []):
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                                item_id = item.get("id")
                                title = item.get("title", "–ú–∞–≥–∞–∑–∏–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                                description = item.get("description", "")
                                
                                # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é)
                                photo_url = item.get("thumb_photo")
                                
                                if not photo_url and "photos" in item and item["photos"] and len(item["photos"]) > 0:
                                    try:
                                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
                                        sizes = item["photos"][0].get("sizes", [])
                                        if sizes:
                                            best_photo = max(sizes, key=lambda size: size.get("width", 0) * size.get("height", 0))
                                            photo_url = best_photo.get("url")
                                    except Exception as photo_e:
                                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}': {photo_e}")
                                
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –≥—Ä—É–ø–ø—ã
                                if not photo_url:
                                    photo_url = default_photo
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                                address = ""
                                phone = ""
                                website = ""
                                work_hours = ""
                                
                                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                                if description:
                                    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è, –∫–∞–∫ –∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                                    # (–î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è)
                                    address_match = re.search(r'–∞–¥—Ä–µ—Å[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                    if address_match:
                                        address = address_match.group(1).strip()
                                    
                                    phone_match = re.search(r'(?:—Ç–µ–ª(?:–µ—Ñ–æ–Ω)?|–∑–≤–æ–Ω–∏—Ç–µ)[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                    if phone_match:
                                        phone = phone_match.group(1).strip()
                                    
                                    website_match = re.search(r'(?:—Å–∞–π—Ç|—Å—Ç—Ä–∞–Ω–∏—Ü–∞|–≥—Ä—É–ø–ø–∞|vk)[:\s-]+([^\s]+)', description, re.IGNORECASE)
                                    if website_match:
                                        website = website_match.group(1).strip()
                                    
                                    work_match = re.search(r'(?:–≥—Ä–∞—Ñ–∏–∫|—Ä–∞–±–æ—Ç–∞–µ–º|—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã|–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã)[:\s-]+([^\n]+)', description, re.IGNORECASE)
                                    if work_match:
                                        work_hours = work_match.group(1).strip()
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                original_shop_title = title
                                
                                shop_data = {
                                    "id": item_id,
                                    "title": title,
                                    "description": description,
                                    "address": address,
                                    "phone": phone,
                                    "website": website,
                                    "work_hours": work_hours,
                                    "photo": photo_url,
                                    "vk_url": f"https://vk.com/market-{owner_id}?w=product-{owner_id}_{item_id}",
                                    "category": "–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã"
                                }
                                
                                shop_categories[all_category][original_shop_title] = shop_data
                                all_shops[original_shop_title] = shop_data
                            except Exception as item_e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {item_e}")
                                continue
                
                except Exception as no_category_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {no_category_e}")
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—Å–µ –µ—â—ë –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            if not shop_categories or all(len(shops) == 0 for category, shops in shop_categories.items()):
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
                return {"all_shops": {}}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            shop_categories["all_shops"] = all_shops
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            category_count = len(shop_categories) - 1  # –ë–µ–∑ all_shops
            shop_count = len(all_shops)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {shop_count} –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ {category_count} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
            
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {[k for k in shop_categories.keys() if k != 'all_shops']}")
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            formatted_shop_categories = {}
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–±–∞–≤–ª—è—è —ç–º–æ–¥–∑–∏
            for category_name, shops in shop_categories.items():
                if category_name == "all_shops":
                    formatted_shop_categories["all_shops"] = all_shops
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_emoji = "üè™"
                if "—Å—Ç—Ä–æ–π" in category_name.lower() or "–º–∞—Ç–µ—Ä–∏–∞–ª" in category_name.lower():
                    category_emoji = "üß±"
                elif "–∏–Ω—Å—Ç—Ä" in category_name.lower():
                    category_emoji = "üî®"
                elif "–º–µ–±–µ–ª" in category_name.lower():
                    category_emoji = "ü™ë"
                elif "—Å–∞–¥" in category_name.lower() or "–æ–≥–æ—Ä–æ–¥" in category_name.lower():
                    category_emoji = "üå±"
                elif "—Å–∞–Ω—Ç–µ—Ö" in category_name.lower() or "–≤–æ–¥–æ—Å–Ω" in category_name.lower():
                    category_emoji = "üöø"
                elif "—ç–ª–µ–∫—Ç—Ä" in category_name.lower() or "–æ—Å–≤–µ—â" in category_name.lower():
                    category_emoji = "üîå"
                elif "—Ö–æ–∑—Ç–æ–≤–∞—Ä" in category_name.lower() or "–¥–ª—è –¥–æ–º–∞" in category_name.lower():
                    category_emoji = "üè°"
                    
                formatted_category_name = f"{category_emoji} {category_name}"
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                formatted_shops = {}
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
                for shop_name, shop_data in shops.items():
                    formatted_shop_name = f"üè™ {shop_name}"
                    formatted_shops[formatted_shop_name] = shop_data
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                formatted_shop_categories[formatted_category_name] = formatted_shops
            
            return formatted_shop_categories
            
        except Exception as inner_e:
            logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {inner_e}")
            return {"all_shops": {}}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
        return {"all_shops": {}}

def get_market_item_info(token, owner_id, album_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ç–∞ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        vk_session = get_vk_session(token)
        if not vk_session:
            return []
            
        vk = vk_session.get_api()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = vk.market.get(
            owner_id=-owner_id, album_id=album_id, count=200, extended=1
        )
        result = []

        for item in items.get("items", []):
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
            photo_url = None
            if "photos" in item and item["photos"]:
                try:
                    best_photo = max(
                        item["photos"][0].get("sizes", []), 
                        key=lambda size: size.get("width", 0) * size.get("height", 0)
                    )
                    photo_url = best_photo.get("url")
                except (IndexError, KeyError):
                    photo_url = item.get("thumb_photo")
            else:
                photo_url = item.get("thumb_photo")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            price_text = ""
            if "price" in item:
                price = item["price"].get("text", "")
                if price:
                    price_text = f"\nüí∞ –¶–µ–Ω–∞: {price}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            result.append(
                {
                    "title": item.get("title", "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    "description": item.get("description", "") + price_text,
                    "photo": photo_url,
                    "url": f"https://vk.com/market-{owner_id}?w=product-{owner_id}_{item.get('id')}",
                    "price": item.get("price", {}).get("text", "")
                }
            )

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {album_id}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {album_id}: {e}")
        return []


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    token = "vk1.a.hyubBHqaBx7Pws9eH-kK0uZtw617T5GPhsRa8k0WvIEpz321CjWx3MpN-jqCTBuB6RXl1mb2dxd38WhBooney-79ZO1fjHXmwBQ4QNOhmJPvdPZiXE8KHPy05zYjUz72V7KXnrn-Bh7_DaKzkk-W5MdliJtsbR-RNo1HFUtByof4pLkaMz-wg27ezaLpet8U06nQ1skIk03sToud8eO7fA"
    group_id = 95855103
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    albums = get_album_names(token, group_id)
    print(f"–ê–ª—å–±–æ–º—ã: {len(albums)}")
    
    if albums:
        sample_album_id = list(albums.values())[0]
        photos = get_album_photos(token, group_id, sample_album_id)
        print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(photos)}")
    
    market_categories = get_market_items(token, group_id)
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {len(market_categories)}")
    
    if market_categories:
        sample_category_id = list(market_categories.values())[0]
        items = get_market_item_info(token, group_id, sample_category_id)
        print(f"–¢–æ–≤–∞—Ä—ã: {len(items)}")
        
    shops = get_shop_list(token, group_id)
    print(f"–ú–∞–≥–∞–∑–∏–Ω—ã: {len(shops)}") 