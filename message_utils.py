import config
import logging
from aiogram.utils.markdown import hide_link, link

logger = logging.getLogger(__name__)

def add_links_footer(message_text: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É—Ç–µ—Ä —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è, 
    –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        message_text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    if "üîó <b>–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:</b>" in message_text:
        return message_text
        
    if config.VK_GROUP_URL in message_text and config.TG_CHANNEL_URL in message_text and config.TG_BOT_URL in message_text:
        return message_text
    
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    return message_text + config.LINKS_FOOTER

async def send_message_with_links(message, text, parse_mode=None, reply_markup=None, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –≤ –∫–æ–Ω—Ü–µ.
    
    Args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        reply_markup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        **kwargs: –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è message.answer
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è message.answer
    """
    text_with_links = add_links_footer(text)
    return await message.answer(
        text_with_links, 
        parse_mode=parse_mode, 
        reply_markup=reply_markup, 
        **kwargs
    )

async def edit_message_with_links(message, text, parse_mode=None, reply_markup=None, **kwargs):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –≤ –∫–æ–Ω—Ü–µ.
    
    Args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        reply_markup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        **kwargs: –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è message.edit_text
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è message.edit_text
    """
    text_with_links = add_links_footer(text)
    return await message.edit_text(
        text_with_links, 
        parse_mode=parse_mode, 
        reply_markup=reply_markup, 
        **kwargs
    )

async def send_photo_with_links(message, photo, caption=None, parse_mode=None, reply_markup=None, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –¥–æ–±–∞–≤–ª—è—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –≤ –∫–æ–Ω—Ü–µ –ø–æ–¥–ø–∏—Å–∏.
    
    Args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        photo: —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        caption: —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏
        parse_mode: —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        reply_markup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        **kwargs: –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è message.answer_photo
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è message.answer_photo
    """
    if caption:
        caption_with_links = add_links_footer(caption)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(caption_with_links) <= 1024:
            return await message.answer_photo(
                photo=photo, 
                caption=caption_with_links, 
                parse_mode=parse_mode, 
                reply_markup=reply_markup, 
                **kwargs
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            photo_message = await message.answer_photo(
                photo=photo,
                reply_markup=reply_markup,
                **kwargs
            )
            
            # –ê –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                caption_with_links,
                parse_mode=parse_mode
            )
            
            return photo_message
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        return await message.answer_photo(
            photo=photo,
            reply_markup=reply_markup,
            **kwargs
        ) 