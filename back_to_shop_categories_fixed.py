# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–∞–≥–∞–∑–∏–Ω–æ–≤", state=User.get_shop_info)
async def back_to_shop_categories(message: types.Message, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode=ParseMode.HTML)
    
    global shops_categories_cache, shops_categories_cache_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if shops_categories_cache and current_time - shops_categories_cache_time < config.CACHE_TIME:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
        shop_categories = shops_categories_cache
    else:
        # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
        shop_categories = await get_shop_list_async(config.VK_TOKEN, config.VK_GROUP_ID)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        shops_categories_cache = shop_categories
        shops_categories_cache_time = current_time
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await loading_message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º all_shops)
    categories = {k: v for k, v in shop_categories.items() if k != "all_shops"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not categories:
        await message.answer(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.",
            reply_markup=buttons.go_back()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    has_shops = False
    for category, shops in categories.items():
        if shops and len(shops) > 0:
            has_shops = True
            break
    
    if not has_shops:
        await message.answer(
            "‚ö†Ô∏è –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º'.",
            reply_markup=buttons.go_back()
        )
        await state.finish()
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {list(categories.keys())}")
    
    # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    categories_list = list(categories.keys())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    kb = buttons.generator(categories_list, row_width=1, force_single_column=True, preserve_emoji=True, sort_alphabetically=False)
    await message.answer('üè™ <b>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞–≥–∞–∑–∏–Ω–æ–≤:', 
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_data(shop_categories)
    await User.get_shop_category.set() 