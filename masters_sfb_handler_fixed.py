"""
–°—Ç—Ä–æ–π –§–æ—Ä—É–º –ë–µ–ª–≥–æ—Ä–æ–¥ - Telegram Bot
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤, –¥–∞–∂–µ –ø—É—Å—Ç—ã—Ö
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import *

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –º–∞—Å—Ç–µ—Ä–æ–≤
async def masters_sfb_handler(message, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode=ParseMode.HTML)
    
    global non_empty_masters_cache, non_empty_masters_cache_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if non_empty_masters_cache and current_time - non_empty_masters_cache_time < config.CACHE_TIME:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤")
        category_buttons = non_empty_masters_cache.get("buttons", [])
        all_categories = non_empty_masters_cache.get("all_categories", {})
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
        try:
            data = await get_album_names_async(config.VK_TOKEN, config.VK_GROUP_ID)
            
            if not data:
                await loading_message.delete()
                await message.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                                    reply_markup=buttons.go_back())
                return
                
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            tasks = []
            for cat, album_id in data.items():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                await vk_api_rate_limit()
                tasks.append((cat, album_id, get_album_photos_async(config.VK_TOKEN, config.VK_GROUP_ID, album_id)))
            
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞—É–∑–∞–º–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            category_buttons = []
            non_empty = {}
            all_categories = {}
            
            for cat, album_id, task in tasks:
                photos = await task
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                all_categories[cat] = album_id
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–∞–∂–µ –ø—É—Å—Ç—ã—Ö
                photo_count = len(photos) if photos else 0
                category_buttons.append((cat, photo_count))
                
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if photos and len(photos) > 0:
                    non_empty[cat] = album_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
            non_empty_masters_cache = {
                "buttons": category_buttons,
                "categories": non_empty,
                "all_categories": all_categories
            }
            non_empty_masters_cache_time = current_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –∫—ç—à–µ: {list(all_categories.keys())}")
            logger.info(f"–ù–µ–ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –∫—ç—à–µ: {list(non_empty.keys())}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
            await loading_message.delete()
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=buttons.go_back()
            )
            return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await loading_message.delete()
    
    if not category_buttons:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤.", reply_markup=buttons.go_back())
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–æ–ø–æ–∫: {[cat for cat, _ in category_buttons]}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {list(all_categories.keys())}")
        
    kb = buttons.generator(category_buttons)
    await message.answer('üë∑‚Äç‚ôÇÔ∏è <b>–û—Ç–∫—Ä—ã—Ç–∞—è –±–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:', 
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb)
    await User.get_master.set()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ
    await state.set_data(all_categories)

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!") 