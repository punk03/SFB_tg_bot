# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.message_handler(state=User.get_shop_category)
async def show_shops_by_category(message: types.Message, state: FSMContext):
    shop_categories = await state.get_data()
    
    # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {message.text}")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {[k for k in shop_categories.keys() if k != 'all_shops']}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é - —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—á–µ—Ç—á–∏–∫ [N]
    category_name = message.text
    
    # –£–±–∏—Ä–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [N]
    if ' [' in category_name and category_name.endswith(']'):
        category_name = category_name.split(' [')[0]
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'üìã ' in category_name:
        category_name = category_name.replace('üìã ', '')
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑
    found_category = None
    for cat in shop_categories.keys():
        if cat == category_name or cat == category_name.strip():
            found_category = cat
            break
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        no_emoji_cat = cat
        for emoji in ["üè™", "üß±", "üî®", "ü™ë", "üå±", "üöø", "üîå", "üè°"]:
            if cat.startswith(emoji + " "):
                no_emoji_cat = cat[len(emoji) + 1:]
                break
        if no_emoji_cat == category_name or no_emoji_cat.strip() == category_name.strip():
            found_category = cat
            break
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    if not found_category:
        categories = {k: v for k, v in shop_categories.items() if k != "all_shops"}
        # –ù–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        categories_list = list(categories.keys())
        await message.answer(
            f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.", 
            reply_markup=buttons.generator(categories_list, row_width=1, force_single_column=True, preserve_emoji=True, sort_alphabetically=False)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    shops = shop_categories[found_category]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not shops:
        await message.answer(
            f"‚ö†Ô∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{found_category}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", 
            reply_markup=buttons.go_back()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    kb = buttons.generator_with_categories_button(shops.keys(), row_width=1, force_single_column=True, preserve_emoji=True)
    await message.answer(
        f"üè™ <b>–ú–∞–≥–∞–∑–∏–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {found_category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:", 
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    await state.update_data(current_category=found_category)
    await User.get_shop_info.set() 